package gc.grivyzom.lobbyCore.commands;

import gc.grivyzom.lobbyCore.MainClass;
import gc.grivyzom.lobbyCore.models.ActionItem;
import gc.grivyzom.lobbyCore.utils.ColorUtils;
import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.command.TabCompleter;
import org.bukkit.entity.Player;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class LobbyCommand implements CommandExecutor, TabCompleter {

    private final MainClass plugin;

    public LobbyCommand(MainClass plugin) {
        this.plugin = plugin;
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {

        if (args.length == 0) {
            sendHelpMessage(sender);
            return true;
        }

        switch (args[0].toLowerCase()) {
            case "reload":
                handleReload(sender);
                break;

            case "test":
                handleTest(sender, args);
                break;

            case "info":
                handleInfo(sender);
                break;

            case "welcome":
                handleWelcome(sender, args);
                break;

            case "version":
                handleVersion(sender);
                break;

            case "items":
                handleItems(sender, args);
                break;

            case "fireworks":
                handleFireworks(sender, args);
                break;

            case "grivyzom":
                handleGrivyzom(sender, args);
                break;

            default:
                sendHelpMessage(sender);
                break;
        }

        return true;
    }

    /**
     * Maneja el comando de recarga
     */
    private void handleReload(CommandSender sender) {
        if (!sender.hasPermission("lobbycore.admin")) {
            ColorUtils.sendMessage((Player) sender, "&c‚ùå &fNo tienes permisos para usar este comando.");
            return;
        }

        try {
            plugin.reloadAll();
            ColorUtils.sendMessage((Player) sender,
                    "&a‚úÖ &f¬°Configuraci√≥n recargada correctamente!");

            plugin.getLogger().info(sender.getName() + " ha recargado la configuraci√≥n de LobbyCore");

        } catch (Exception e) {
            ColorUtils.sendMessage((Player) sender,
                    "&c‚ùå &fError al recargar la configuraci√≥n: " + e.getMessage());
            plugin.getLogger().severe("Error al recargar configuraci√≥n: " + e.getMessage());
        }
    }

    /**
     * Maneja los comandos de integraci√≥n con GrivyzomCore
     */
    private void handleGrivyzom(CommandSender sender, String[] args) {
        if (!sender.hasPermission("lobbycore.admin")) {
            ColorUtils.sendMessage((Player) sender, "&c‚ùå &fNo tienes permisos para usar este comando.");
            return;
        }

        if (!(sender instanceof Player)) {
            sender.sendMessage("Este comando solo puede ser usado por jugadores.");
            return;
        }

        Player player = (Player) sender;

        if (args.length < 2) {
            ColorUtils.sendMessage(player,
                    "&c‚ùå &fUso: /lobbycore grivyzom <ping|status|stats|data|top|reconnect>");
            return;
        }

        switch (args[1].toLowerCase()) {
            case "ping":
                handleGrivyzomPing(player);
                break;

            case "status":
                handleGrivyzomStatus(player);
                break;

            case "stats":
                handleGrivyzomStats(player);
                break;

            case "data":
                handleGrivyzomData(player, args);
                break;

            case "top":
                handleGrivyzomTop(player, args);
                break;

            case "reconnect":
                handleGrivyzomReconnect(player);
                break;

            default:
                ColorUtils.sendMessage(player,
                        "&c‚ùå &fUso: /lobbycore grivyzom <ping|status|stats|data|top|reconnect>");
                break;
        }
    }

    /**
     * Env√≠a ping a GrivyzomCore
     */
    private void handleGrivyzomPing(Player player) {
        if (plugin.getGrivyzomIntegration() == null) {
            ColorUtils.sendMessage(player, "&c‚ùå &fIntegraci√≥n GrivyzomCore no disponible.");
            return;
        }

        ColorUtils.sendMessage(player, "&eüì° &fEnviando ping a GrivyzomCore...");
        plugin.getGrivyzomIntegration().sendPingToGrivyzomCore();

        // Verificar respuesta despu√©s de 3 segundos
        Bukkit.getScheduler().runTaskLater(plugin, () -> {
            if (plugin.getGrivyzomIntegration().isGrivyzomCoreAvailable()) {
                ColorUtils.sendMessage(player, "&aüèì &fPONG recibido de GrivyzomCore!");
            } else {
                ColorUtils.sendMessage(player, "&c‚ùå &fNo se recibi√≥ respuesta de GrivyzomCore.");
            }
        }, 60L);
    }

    /**
     * Muestra el estado de la integraci√≥n
     */
    private void handleGrivyzomStatus(Player player) {
        boolean integrationActive = plugin.getGrivyzomIntegration() != null;
        boolean connected = integrationActive && plugin.getGrivyzomIntegration().isGrivyzomCoreAvailable();
        boolean placeholdersActive = plugin.getPlaceholders() != null && plugin.getPlaceholders().isWorking();

        ColorUtils.sendMessages(player, Arrays.asList(
                "",
                "&#4ECDC4‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                "",
                "  &büîß &fEstado de Integraci√≥n &aGrivyzomCore",
                "",
                "  &7‚îÉ &fIntegraci√≥n: " + (integrationActive ? "&a‚úÖ Activa" : "&c‚ùå Inactiva"),
                "  &7‚îÉ &fConexi√≥n: " + (connected ? "&a‚úÖ Conectado" : "&c‚ùå Desconectado"),
                "  &7‚îÉ &fPlaceholders: " + (placeholdersActive ? "&a‚úÖ Funcionando" : "&c‚ùå No disponible"),
                "  &7‚îÉ &fCanales: " + (integrationActive ? "&a4 registrados" : "&c0 registrados"),
                "",
                "  &7‚îÉ &fResponse Handler: " + (plugin.getResponseHandler() != null ? "&a‚úÖ Activo" : "&c‚ùå Inactivo"),
                "  &7‚îÉ &fCache Stats: " + (plugin.getResponseHandler() != null ?
                        plugin.getResponseHandler().getCacheStats() : "&7No disponible"),
                "",
                connected ? "  &a‚ú® &fTodos los sistemas funcionando correctamente" :
                        "  &c‚ö† &fAlgunos sistemas no est√°n disponibles",
                "",
                "&#4ECDC4‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                ""
        ));
    }

    /**
     * Solicita estad√≠sticas del network
     */
    private void handleGrivyzomStats(Player player) {
        if (plugin.getGrivyzomIntegration() == null || !plugin.getGrivyzomIntegration().isGrivyzomCoreAvailable()) {
            ColorUtils.sendMessage(player, "&c‚ùå &fGrivyzomCore no est√° conectado.");
            return;
        }

        ColorUtils.sendMessage(player, "&eüìà &fSolicitando estad√≠sticas del network...");
        plugin.getGrivyzomIntegration().requestNetworkStats();

        ColorUtils.sendMessage(player, "&7Los datos se actualizar√°n autom√°ticamente en los placeholders.");
    }

    /**
     * Solicita datos de un jugador espec√≠fico
     */
    private void handleGrivyzomData(Player player, String[] args) {
        if (plugin.getGrivyzomIntegration() == null || !plugin.getGrivyzomIntegration().isGrivyzomCoreAvailable()) {
            ColorUtils.sendMessage(player, "&c‚ùå &fGrivyzomCore no est√° conectado.");
            return;
        }

        Player target = player;
        if (args.length > 2) {
            target = Bukkit.getPlayer(args[2]);
            if (target == null) {
                ColorUtils.sendMessage(player, "&c‚ùå &fJugador no encontrado.");
                return;
            }
        }

        ColorUtils.sendMessage(player, "&eüìä &fSolicitando datos de &b" + target.getName() + "&f...");
        plugin.getGrivyzomIntegration().requestPlayerData(target);

        ColorUtils.sendMessage(player, "&7Los datos se actualizar√°n autom√°ticamente en los placeholders.");
    }

    /**
     * Solicita top de jugadores
     */
    private void handleGrivyzomTop(Player player, String[] args) {
        if (plugin.getGrivyzomIntegration() == null || !plugin.getGrivyzomIntegration().isGrivyzomCoreAvailable()) {
            ColorUtils.sendMessage(player, "&c‚ùå &fGrivyzomCore no est√° conectado.");
            return;
        }

        int limit = 5;
        if (args.length > 2) {
            try {
                limit = Integer.parseInt(args[2]);
                if (limit < 1 || limit > 10) {
                    limit = 5;
                }
            } catch (NumberFormatException e) {
                limit = 5;
            }
        }

        ColorUtils.sendMessage(player, "&eüèÜ &fSolicitando top " + limit + " jugadores...");
        plugin.getGrivyzomIntegration().requestTopPlayers(limit);

        ColorUtils.sendMessage(player, "&7Los datos se actualizar√°n autom√°ticamente en los placeholders.");
    }

    /**
     * Fuerza reconexi√≥n con GrivyzomCore
     */
    private void handleGrivyzomReconnect(Player player) {
        if (plugin.getGrivyzomIntegration() == null) {
            ColorUtils.sendMessage(player, "&c‚ùå &fIntegraci√≥n GrivyzomCore no disponible.");
            return;
        }

        ColorUtils.sendMessage(player, "&eüîÑ &fForzando reconexi√≥n con GrivyzomCore...");
        plugin.getGrivyzomIntegration().forceReconnect();

        ColorUtils.sendMessage(player, "&7Reintentando conexi√≥n en 3 segundos...");
    }

    /**
     * Maneja el comando de prueba
     */
    private void handleTest(CommandSender sender, String[] args) {
        if (!sender.hasPermission("lobbycore.admin")) {
            ColorUtils.sendMessage((Player) sender, "&c‚ùå &fNo tienes permisos para usar este comando.");
            return;
        }

        if (!(sender instanceof Player)) {
            sender.sendMessage("Este comando solo puede ser usado por jugadores.");
            return;
        }

        Player player = (Player) sender;

        if (args.length > 1) {
            // Probar con otro jugador
            Player target = Bukkit.getPlayer(args[1]);
            if (target == null) {
                ColorUtils.sendMessage(player, "&c‚ùå &fJugador no encontrado.");
                return;
            }

            plugin.getWelcomeMessageManager().sendWelcomeMessage(target);
            ColorUtils.sendMessage(player,
                    "&a‚úÖ &fMensaje de bienvenida enviado a &b" + target.getName() + "&f.");
        } else {
            // Probar consigo mismo
            plugin.getWelcomeMessageManager().sendWelcomeMessage(player);
            ColorUtils.sendMessage(player,
                    "&a‚úÖ &fMensaje de bienvenida enviado.");
        }
    }

    /**
     * Maneja el comando de informaci√≥n
     */
    private void handleInfo(CommandSender sender) {
        if (!(sender instanceof Player)) {
            sender.sendMessage("Este comando solo puede ser usado por jugadores.");
            return;
        }

        Player player = (Player) sender;
        MainClass.PluginStats stats = plugin.getPluginStats();

        ColorUtils.sendMessages(player, Arrays.asList(
                "",
                "&#FF6B6B‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                "",
                "  &b‚ö° &fInformaci√≥n de &aLobbyCore",
                "",
                "  &7‚îÉ &fVersi√≥n: &a" + plugin.getDescription().getVersion(),
                "  &7‚îÉ &fAutor: &a" + plugin.getDescription().getAuthors().get(0),
                "  &7‚îÉ &fWeb: &a" + plugin.getDescription().getWebsite(),
                "  &7‚îÉ &fBienvenida: &a" + (plugin.getConfigManager().isWelcomeEnabled() ? "Habilitada" : "Deshabilitada"),
                "  &7‚îÉ &fItems de acci√≥n: &a" + stats.getActionItemsLoaded() + " configurados",
                "  &7‚îÉ &fJugadores: &a" + stats.getOnlinePlayers() + "&7/&a" + Bukkit.getMaxPlayers(),
                "",
                "  &büîß &fIntegraci√≥n GrivyzomCore:",
                "  &7‚îÉ &fEstado: " + (stats.isGrivyzomConnected() ? "&a‚úÖ Conectado" : "&c‚ùå Desconectado"),
                "  &7‚îÉ &fPlaceholders: " + (stats.isPlaceholdersActive() ? "&a‚úÖ Activos" : "&c‚ùå Inactivos"),
                "",
                "  &7Usa &e/lobbycore grivyzom status &7para m√°s detalles",
                "  &7Usa &e/lobbycore help &7para ver todos los comandos",
                "",
                "&#FF6B6B‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                ""
        ));
    }

    /**
     * Maneja el comando de items de acci√≥n
     */
    private void handleItems(CommandSender sender, String[] args) {
        if (!sender.hasPermission("lobbycore.admin")) {
            ColorUtils.sendMessage((Player) sender, "&c‚ùå &fNo tienes permisos para usar este comando.");
            return;
        }

        if (!(sender instanceof Player)) {
            sender.sendMessage("Este comando solo puede ser usado por jugadores.");
            return;
        }

        Player player = (Player) sender;

        if (args.length < 2) {
            ColorUtils.sendMessage(player,
                    "&c‚ùå &fUso: /lobbycore items <list|give|reload>");
            return;
        }

        switch (args[1].toLowerCase()) {
            case "list":
                handleItemsList(player);
                break;

            case "give":
                handleItemsGive(player, args);
                break;

            case "reload":
                plugin.getItemActionManager().reload();
                ColorUtils.sendMessage(player,
                        "&a‚úÖ &f¬°Items de acci√≥n recargados!");
                break;

            default:
                ColorUtils.sendMessage(player,
                        "&c‚ùå &fUso: /lobbycore items <list|give|reload>");
                break;
        }
    }

    /**
     * Lista todos los items de acci√≥n disponibles
     */
    private void handleItemsList(Player player) {
        Map<String, ActionItem> items = plugin.getItemActionManager().getAllActionItems();

        if (items.isEmpty()) {
            ColorUtils.sendMessage(player, "&e‚ö† &fNo hay items de acci√≥n configurados.");
            return;
        }

        ColorUtils.sendMessage(player, "");
        ColorUtils.sendMessage(player, "&büì¶ &fItems de acci√≥n disponibles:");
        ColorUtils.sendMessage(player, "");

        for (ActionItem item : items.values()) {
            String flags = "";
            if (item.isGiveOnJoin()) flags += "&a[AUTO] ";
            if (item.isPreventDrop()) flags += "&c[NO-DROP] ";
            if (item.isPreventMove()) flags += "&e[FIJO] ";
            if (item.isKeepOnDeath()) flags += "&d[INMORTAL] ";

            ColorUtils.sendMessage(player,
                    "&7‚Ä¢ &e" + item.getItemId() + " &7- " + item.getDisplayName() + " " + flags);
        }

        ColorUtils.sendMessage(player, "");
        ColorUtils.sendMessage(player, "&7Usa &e/lobbycore items give <item> [jugador] &7para dar un item");
        ColorUtils.sendMessage(player, "");
    }

    /**
     * Da un item de acci√≥n a un jugador
     */
    private void handleItemsGive(Player sender, String[] args) {
        if (args.length < 3) {
            ColorUtils.sendMessage(sender,
                    "&c‚ùå &fUso: /lobbycore items give <item> [jugador]");
            return;
        }

        String itemId = args[2];
        ActionItem actionItem = plugin.getItemActionManager().getActionItem(itemId);

        if (actionItem == null) {
            ColorUtils.sendMessage(sender,
                    "&c‚ùå &fItem de acci√≥n no encontrado: &e" + itemId);
            return;
        }

        Player target = sender;
        if (args.length > 3) {
            target = Bukkit.getPlayer(args[3]);
            if (target == null) {
                ColorUtils.sendMessage(sender, "&c‚ùå &fJugador no encontrado.");
                return;
            }
        }

        plugin.getItemActionManager().giveItemToPlayer(target, actionItem);

        if (target.equals(sender)) {
            ColorUtils.sendMessage(sender,
                    "&a‚úÖ &fHas recibido el item: " + actionItem.getDisplayName());
        } else {
            ColorUtils.sendMessage(sender,
                    "&a‚úÖ &fItem &e" + itemId + " &fdado a &b" + target.getName() + "&f.");
            ColorUtils.sendMessage(target,
                    "&aüéÅ &fHas recibido un item: " + actionItem.getDisplayName());
        }
    }

    /**
     * Maneja el comando de fuegos artificiales
     */
    private void handleFireworks(CommandSender sender, String[] args) {
        if (!sender.hasPermission("lobbycore.admin")) {
            ColorUtils.sendMessage((Player) sender, "&c‚ùå &fNo tienes permisos para usar este comando.");
            return;
        }

        if (args.length < 2) {
            ColorUtils.sendMessage((Player) sender,
                    "&c‚ùå &fUso: /lobbycore fireworks <enable|disable|test|status>");
            return;
        }

        switch (args[1].toLowerCase()) {
            case "enable":
                plugin.getFireworksManager().setFireworksEnabled(true);
                ColorUtils.sendMessage((Player) sender,
                        "&a‚ú® &f¬°Fuegos artificiales habilitados!");
                break;

            case "disable":
                plugin.getFireworksManager().setFireworksEnabled(false);
                ColorUtils.sendMessage((Player) sender,
                        "&c‚ú® &fFuegos artificiales deshabilitados.");
                break;

            case "test":
                if (!(sender instanceof Player)) {
                    sender.sendMessage("Este comando solo puede ser usado por jugadores.");
                    return;
                }

                Player player = (Player) sender;
                plugin.getFireworksManager().launchTestFireworks(player);
                break;

            case "status":
                boolean enabled = plugin.getFireworksManager().isEnabled();
                String status = enabled ? "&aHabilitados" : "&cDeshabilitados";
                ColorUtils.sendMessage((Player) sender,
                        "&7Estado de fuegos artificiales: " + status);
                break;

            default:
                ColorUtils.sendMessage((Player) sender,
                        "&c‚ùå &fUso: /lobbycore fireworks <enable|disable|test|status>");
                break;
        }
    }

    /**
     * Maneja el comando de bienvenida personalizada
     */
    private void handleWelcome(CommandSender sender, String[] args) {
        if (!sender.hasPermission("lobbycore.admin")) {
            ColorUtils.sendMessage((Player) sender, "&c‚ùå &fNo tienes permisos para usar este comando.");
            return;
        }

        if (args.length < 3) {
            ColorUtils.sendMessage((Player) sender,
                    "&c‚ùå &fUso: /lobbycore welcome <jugador> <mensaje>");
            return;
        }

        Player target = Bukkit.getPlayer(args[1]);
        if (target == null) {
            ColorUtils.sendMessage((Player) sender, "&c‚ùå &fJugador no encontrado.");
            return;
        }

        // Unir el mensaje desde el argumento 2 en adelante
        String message = String.join(" ", Arrays.copyOfRange(args, 2, args.length));

        plugin.getWelcomeMessageManager().sendCustomWelcomeMessage(target, message);

        if (sender instanceof Player) {
            ColorUtils.sendMessage((Player) sender,
                    "&a‚úÖ &fMensaje personalizado enviado a &b" + target.getName() + "&f.");
        }
    }

    /**
     * Maneja el comando de versi√≥n
     */
    private void handleVersion(CommandSender sender) {
        if (!(sender instanceof Player)) {
            sender.sendMessage("LobbyCore v" + plugin.getDescription().getVersion() +
                    " por " + plugin.getDescription().getAuthors().get(0));
            return;
        }

        Player player = (Player) sender;

        ColorUtils.sendMessages(player, Arrays.asList(
                "",
                "  &büîß &fLobbyCore &av" + plugin.getDescription().getVersion(),
                "  &7Por &a" + plugin.getDescription().getAuthors().get(0),
                "  &7Web: &b" + plugin.getDescription().getWebsite(),
                "  &7Integraci√≥n: &bGrivyzomCore " + (plugin.isGrivyzomIntegrationActive() ? "&a‚úÖ" : "&c‚ùå"),
                ""
        ));
    }

    /**
     * Env√≠a el mensaje de ayuda
     */
    private void sendHelpMessage(CommandSender sender) {
        if (!(sender instanceof Player)) {
            sender.sendMessage("=== LobbyCore Commands ===");
            sender.sendMessage("/lobbycore reload - Recarga la configuraci√≥n");
            sender.sendMessage("/lobbycore info - Informaci√≥n del plugin");
            sender.sendMessage("/lobbycore test [jugador] - Prueba el mensaje de bienvenida");
            sender.sendMessage("/lobbycore items <list|give|reload> - Gestionar items de acci√≥n");
            sender.sendMessage("/lobbycore grivyzom <ping|status|stats> - Comandos GrivyzomCore");
            return;
        }

        Player player = (Player) sender;

        ColorUtils.sendMessages(player, Arrays.asList(
                "",
                "&#FF6B6B‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                "",
                "  &büìã &fComandos de &aLobbyCore",
                "",
                "  &e/lobbycore reload &7- &fRecarga la configuraci√≥n",
                "  &e/lobbycore info &7- &fInformaci√≥n del plugin",
                "  &e/lobbycore version &7- &fMuestra la versi√≥n",
                "  &e/lobbycore test [jugador] &7- &fPrueba el mensaje de bienvenida",
                "  &e/lobbycore welcome <jugador> <mensaje> &7- &fEnv√≠a mensaje personalizado",
                "  &e/lobbycore items <list|give|reload> &7- &fGestionar items de acci√≥n",
                "  &e/lobbycore fireworks <enable|disable|test> &7- &fGestionar fuegos artificiales",
                "",
                "  &büîß &fComandos GrivyzomCore:",
                "  &e/lobbycore grivyzom ping &7- &fProbar conexi√≥n",
                "  &e/lobbycore grivyzom status &7- &fVer estado de integraci√≥n",
                "  &e/lobbycore grivyzom stats &7- &fEstad√≠sticas del network",
                "  &e/lobbycore grivyzom data [jugador] &7- &fDatos de jugador",
                "  &e/lobbycore grivyzom top [n√∫mero] &7- &fTop jugadores",
                "  &e/lobbycore grivyzom reconnect &7- &fForzar reconexi√≥n",
                "",
                "  &7Permisos:",
                "  &c‚Ä¢ &flobbycore.admin &7- &fAcceso a comandos administrativos",
                "",
                "&#FF6B6B‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                ""
        ));
    }

    @Override
    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
        if (args.length == 1) {
            return Arrays.asList("reload", "test", "info", "welcome", "version", "items", "fireworks", "grivyzom")
                    .stream()
                    .filter(s -> s.toLowerCase().startsWith(args[0].toLowerCase()))
                    .collect(Collectors.toList());
        }

        if (args.length == 2) {
            switch (args[0].toLowerCase()) {
                case "test":
                case "welcome":
                    return Bukkit.getOnlinePlayers()
                            .stream()
                            .map(Player::getName)
                            .filter(name -> name.toLowerCase().startsWith(args[1].toLowerCase()))
                            .collect(Collectors.toList());

                case "items":
                    return Arrays.asList("list", "give", "reload")
                            .stream()
                            .filter(s -> s.toLowerCase().startsWith(args[1].toLowerCase()))
                            .collect(Collectors.toList());

                case "fireworks":
                    return Arrays.asList("enable", "disable", "test", "status")
                            .stream()
                            .filter(s -> s.toLowerCase().startsWith(args[1].toLowerCase()))
                            .collect(Collectors.toList());

                case "grivyzom":
                    return Arrays.asList("ping", "status", "stats", "data", "top", "reconnect")
                            .stream()
                            .filter(s -> s.toLowerCase().startsWith(args[1].toLowerCase()))
                            .collect(Collectors.toList());
            }
        }

        if (args.length == 3) {
            if (args[0].equalsIgnoreCase("items") && args[1].equalsIgnoreCase("give")) {
                return plugin.getItemActionManager().getAllActionItems().keySet()
                        .stream()
                        .filter(itemId -> itemId.toLowerCase().startsWith(args[2].toLowerCase()))
                        .collect(Collectors.toList());
            }

            if (args[0].equalsIgnoreCase("grivyzom") && args[1].equalsIgnoreCase("data")) {
                return Bukkit.getOnlinePlayers()
                        .stream()
                        .map(Player::getName)
                        .filter(name -> name.toLowerCase().startsWith(args[2].toLowerCase()))
                        .collect(Collectors.toList());
            }

            if (args[0].equalsIgnoreCase("grivyzom") && args[1].equalsIgnoreCase("top")) {
                return Arrays.asList("3", "5", "10")
                        .stream()
                        .filter(s -> s.startsWith(args[2]))
                        .collect(Collectors.toList());
            }
        }

        if (args.length == 4 && args[0].equalsIgnoreCase("items") && args[1].equalsIgnoreCase("give")) {
            return Bukkit.getOnlinePlayers()
                    .stream()
                    .map(Player::getName)
                    .filter(name -> name.toLowerCase().startsWith(args[3].toLowerCase()))
                    .collect(Collectors.toList());
        }

        return Arrays.asList();
    }

    // Agregar estos m√©todos a tu clase LobbyCommand existente

    /**
     * Muestra la lista de todos los placeholders disponibles
     */
    private void handlePlaceholdersList(Player player) {
        ColorUtils.sendMessages(player, Arrays.asList(
                "",
                "&#FFD700‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                "",
                "  &eüìã &fPlaceholders Disponibles &aGrivyzomCore",
                "",
                "  &büë§ &fDatos del Jugador:",
                "  &7‚Ä¢ &e%grivyzom_player_name% &7- Nombre del jugador",
                "  &7‚Ä¢ &e%grivyzom_coins% &7- Monedas del jugador",
                "  &7‚Ä¢ &e%grivyzom_gems% &7- Gemas del jugador",
                "  &7‚Ä¢ &e%grivyzom_rank% &7- Rango del jugador",
                "  &7‚Ä¢ &e%grivyzom_level% &7- Nivel del jugador",
                "  &7‚Ä¢ &e%grivyzom_playtime% &7- Tiempo de juego",
                "",
                "  &büåê &fDatos del Network:",
                "  &7‚Ä¢ &e%grivyzom_network_players% &7- Jugadores online totales",
                "  &7‚Ä¢ &e%grivyzom_online% &7- Alias para network_players",
                "  &7‚Ä¢ &e%grivyzom_servers% &7- Servidores activos",
                "  &7‚Ä¢ &e%grivyzom_status% &7- Estado del network",
                "  &7‚Ä¢ &e%grivyzom_connection_status% &7- Estado de conexi√≥n (‚óè)",
                "  &7‚Ä¢ &e%grivyzom_connection_latency% &7- Latencia en ms",
                "  &7‚Ä¢ &e%grivyzom_server_name% &7- Nombre del servidor",
                "  &7‚Ä¢ &e%grivyzom_server_uptime% &7- Tiempo activo",
                "",
                "  &büèÜ &fTop Players (Monedas):",
                "  &7‚Ä¢ &e%grivyzom_top_coins_1% &7- Nombre #1",
                "  &7‚Ä¢ &e%grivyzom_top_coins_1_amount% &7- Cantidad #1",
                "  &7‚Ä¢ &e%grivyzom_top_coins_2% &7- Nombre #2",
                "  &7‚Ä¢ &e%grivyzom_top_coins_3% &7- Nombre #3",
                "",
                "  &büíé &fTop Players (Gemas):",
                "  &7‚Ä¢ &e%grivyzom_top_gems_1% &7- Nombre #1",
                "  &7‚Ä¢ &e%grivyzom_top_gems_1_amount% &7- Cantidad #1",
                "  &7‚Ä¢ &e%grivyzom_top_gems_2% &7- Nombre #2",
                "  &7‚Ä¢ &e%grivyzom_top_gems_3% &7- Nombre #3",
                "",
                "  &büí∞ &fEconom√≠a Global:",
                "  &7‚Ä¢ &e%grivyzom_economy_total_coins% &7- Total monedas",
                "  &7‚Ä¢ &e%grivyzom_economy_total_gems% &7- Total gemas",
                "  &7‚Ä¢ &e%grivyzom_economy_circulation% &7- % en circulaci√≥n",
                "",
                "  &b‚ö° &fTiempo Real:",
                "  &7‚Ä¢ &e%grivyzom_realtime_players% &7- Jugadores actuales",
                "  &7‚Ä¢ &e%grivyzom_realtime_tps% &7- TPS del servidor",
                "  &7‚Ä¢ &e%grivyzom_realtime_memory% &7- Uso de memoria",
                "",
                "  &7Usa &e/lobbycore placeholders test <categor√≠a> &7para probar",
                "",
                "&#FFD700‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                ""
        ));
    }

    /**
     * Fuerza el refresco de todos los placeholders
     */
    private void handlePlaceholdersRefresh(Player player) {
        ColorUtils.sendMessage(player, "&eüîÑ &fForzando actualizaci√≥n de placeholders...");

        try {
            // Limpiar cache del response handler
            if (plugin.getResponseHandler() != null) {
                plugin.getResponseHandler().clearCache();
            }

            // Refrescar placeholders si est√°n disponibles
            if (plugin.getPlaceholders() != null) {
                plugin.getPlaceholders().refreshData();
            }

            // Solicitar datos frescos si GrivyzomCore est√° disponible
            if (plugin.getGrivyzomIntegration() != null && plugin.getGrivyzomIntegration().isGrivyzomCoreAvailable()) {
                plugin.getGrivyzomIntegration().requestNetworkStats();
                plugin.getGrivyzomIntegration().requestPlayerData(player);
                plugin.getGrivyzomIntegration().requestTopPlayers("COINS", 5);
                plugin.getGrivyzomIntegration().requestTopPlayers("GEMS", 5);
            }

            ColorUtils.sendMessage(player, "&a‚úÖ &fPlaceholders actualizados correctamente");
            ColorUtils.sendMessage(player, "&7Los nuevos datos estar√°n disponibles en unos segundos");

        } catch (Exception e) {
            ColorUtils.sendMessage(player, "&c‚ùå &fError actualizando placeholders: " + e.getMessage());
            plugin.getLogger().warning("Error refrescando placeholders: " + e.getMessage());
        }
    }

    /**
     * Muestra estad√≠sticas del sistema de placeholders
     */
    private void handlePlaceholdersStats(Player player) {
        try {
            String cacheStats = "No disponible";
            String placeholderStatus = "No disponible";
            String connectionStatus = "Desconectado";

            // Obtener estad√≠sticas del cache
            if (plugin.getResponseHandler() != null) {
                cacheStats = plugin.getResponseHandler().getCacheStats();
            }

            // Obtener estado de placeholders
            if (plugin.getPlaceholders() != null) {
                var stats = plugin.getPlaceholders().getStats();
                placeholderStatus = stats.toString();
            }

            // Obtener estado de conexi√≥n
            if (plugin.getGrivyzomIntegration() != null) {
                if (plugin.getGrivyzomIntegration().isGrivyzomCoreAvailable()) {
                    connectionStatus = "Conectado";
                }
            }

            ColorUtils.sendMessages(player, Arrays.asList(
                    "",
                    "&#9B59B6‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                    "",
                    "  &düìä &fEstad√≠sticas de Placeholders &aGrivyzomCore",
                    "",
                    "  &eüîß &fEstado del Sistema:",
                    "  &7‚îÉ &fGrivyzomCore: &" + (connectionStatus.equals("Conectado") ? "a" : "c") + connectionStatus,
                    "  &7‚îÉ &fPlaceholderAPI: &" + (plugin.getPlaceholders() != null ? "a‚úÖ Registrado" : "c‚ùå No disponible"),
                    "  &7‚îÉ &fResponse Handler: &" + (plugin.getResponseHandler() != null ? "a‚úÖ Activo" : "c‚ùå Inactivo"),
                    "",
                    "  &eüìà &fEstad√≠sticas de Cache:",
                    "  &7‚îÉ &f" + cacheStats,
                    "",
                    "  &e‚öô &fEstado de Placeholders:",
                    "  &7‚îÉ &f" + placeholderStatus,
                    "",
                    "  &eüïê &fTiempos de Actualizaci√≥n (TTL):",
                    "  &7‚îÉ &fDatos de jugador: &a5 minutos",
                    "  &7‚îÉ &fDatos de network: &a1 minuto",
                    "  &7‚îÉ &fTop players: &a2 minutos",
                    "  &7‚îÉ &fEconom√≠a global: &a3 minutos",
                    "",
                    "  &7Usa &e/lobbycore placeholders refresh &7para forzar actualizaci√≥n",
                    "",
                    "&#9B59B6‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                    ""
            ));

        } catch (Exception e) {
            ColorUtils.sendMessage(player, "&c‚ùå &fError obteniendo estad√≠sticas: " + e.getMessage());
        }
    }

    /**
     * Muestra test espec√≠fico de placeholders del jugador
     */
    private void showPlayerPlaceholderTest(Player player) {
        ColorUtils.sendMessages(player, Arrays.asList(
                "",
                "&#3498DB‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                "",
                "  &büë§ &fTest Placeholders del Jugador",
                "",
                "  &eüìä &fDatos B√°sicos:",
                "  &7‚îÉ &fNombre: &b" + resolvePlaceholder(player, "%grivyzom_player_name%"),
                "  &7‚îÉ &fRango: &6" + resolvePlaceholder(player, "%grivyzom_rank%"),
                "  &7‚îÉ &fNivel: &a" + resolvePlaceholder(player, "%grivyzom_level%"),
                "",
                "  &eüí∞ &fRecursos:",
                "  &7‚îÉ &fMonedas: &e" + resolvePlaceholder(player, "%grivyzom_coins%"),
                "  &7‚îÉ &fGemas: &d" + resolvePlaceholder(player, "%grivyzom_gems%"),
                "",
                "  &e‚è∞ &fTiempo:",
                "  &7‚îÉ &fTiempo jugado: &a" + resolvePlaceholder(player, "%grivyzom_playtime%"),
                "  &7‚îÉ &fPrimera conexi√≥n: &7" + resolvePlaceholder(player, "%grivyzom_player_first_join%"),
                "  &7‚îÉ &f√öltima conexi√≥n: &7" + resolvePlaceholder(player, "%grivyzom_player_last_join%"),
                "",
                "  &7üí° &fEstos datos se actualizan cada 5 minutos desde GrivyzomCore",
                "  &7üîÑ &fSi GrivyzomCore no est√° disponible, se usan datos simulados",
                "",
                "&#3498DB‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                ""
        ));
    }

    /**
     * Muestra test espec√≠fico de placeholders del network
     */
    private void showNetworkPlaceholderTest(Player player) {
        ColorUtils.sendMessages(player, Arrays.asList(
                "",
                "&#27AE60‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                "",
                "  &aüåê &fTest Placeholders del Network",
                "",
                "  &eüìä &fEstad√≠sticas Generales:",
                "  &7‚îÉ &fJugadores online: &a" + resolvePlaceholder(player, "%grivyzom_network_players%"),
                "  &7‚îÉ &fAlias (online): &a" + resolvePlaceholder(player, "%grivyzom_online%"),
                "  &7‚îÉ &fServidores activos: &a" + resolvePlaceholder(player, "%grivyzom_servers%"),
                "  &7‚îÉ &fEstado del network: " + resolvePlaceholder(player, "%grivyzom_status%"),
                "",
                "  &eüîó &fConexi√≥n:",
                "  &7‚îÉ &fEstado visual: " + resolvePlaceholder(player, "%grivyzom_connection_status%"),
                "  &7‚îÉ &fLatencia: &e" + resolvePlaceholder(player, "%grivyzom_connection_latency%"),
                "",
                "  &eüñ• &fServidor Actual:",
                "  &7‚îÉ &fNombre: &b" + resolvePlaceholder(player, "%grivyzom_server_name%"),
                "  &7‚îÉ &fTipo: &b" + resolvePlaceholder(player, "%grivyzom_server_type%"),
                "  &7‚îÉ &fTiempo activo: &a" + resolvePlaceholder(player, "%grivyzom_server_uptime%"),
                "",
                "  &7üí° &fEstos datos se actualizan cada 1 minuto desde el proxy",
                "  &7üîÑ &fIncluye datos de todos los servidores del network",
                "",
                "&#27AE60‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                ""
        ));
    }

    /**
     * Muestra test espec√≠fico de placeholders de econom√≠a
     */
    private void showEconomyPlaceholderTest(Player player) {
        ColorUtils.sendMessages(player, Arrays.asList(
                "",
                "&#F39C12‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                "",
                "  &6üí∞ &fTest Placeholders de Econom√≠a",
                "",
                "  &eüìà &fEconom√≠a Global del Servidor:",
                "  &7‚îÉ &fTotal monedas: &e" + resolvePlaceholder(player, "%grivyzom_economy_total_coins%"),
                "  &7‚îÉ &fTotal gemas: &d" + resolvePlaceholder(player, "%grivyzom_economy_total_gems%"),
                "  &7‚îÉ &fCirculaci√≥n: &a" + resolvePlaceholder(player, "%grivyzom_economy_circulation%"),
                "",
                "  &eüë§ &fTus Recursos Personales:",
                "  &7‚îÉ &fTus monedas: &e" + resolvePlaceholder(player, "%grivyzom_coins%"),
                "  &7‚îÉ &fTus gemas: &d" + resolvePlaceholder(player, "%grivyzom_gems%"),
                "",
                "  &eüìä &fAn√°lisis:",
                "  &7‚îÉ &fLa econom√≠a total incluye todos los servidores",
                "  &7‚îÉ &fLos datos se actualizan cada 3 minutos",
                "  &7‚îÉ &fEl % de circulaci√≥n indica actividad econ√≥mica",
                "",
                "  &7üí° &fLa econom√≠a global crece constantemente con la actividad",
                "  &7üîÑ &fTus recursos se sincronizan con el sistema central",
                "",
                "&#F39C12‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                ""
        ));
    }

    /**
     * Muestra test espec√≠fico de placeholders de tops
     */
    private void showTopPlaceholderTest(Player player) {
        ColorUtils.sendMessages(player, Arrays.asList(
                "",
                "&#E74C3C‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                "",
                "  &cüèÜ &fTest Placeholders de Rankings",
                "",
                "  &eüëë &fTop Jugadores por Monedas:",
                "  &7‚îÉ &f#1: &b" + resolvePlaceholder(player, "%grivyzom_top_coins_1%") +
                        " &7(&e" + resolvePlaceholder(player, "%grivyzom_top_coins_1_amount%") + "&7)",
                "  &7‚îÉ &f#2: &b" + resolvePlaceholder(player, "%grivyzom_top_coins_2%") +
                        " &7(&e" + resolvePlaceholder(player, "%grivyzom_top_coins_2_amount%") + "&7)",
                "  &7‚îÉ &f#3: &b" + resolvePlaceholder(player, "%grivyzom_top_coins_3%") +
                        " &7(&e" + resolvePlaceholder(player, "%grivyzom_top_coins_3_amount%") + "&7)",
                "",
                "  &eüíé &fTop Jugadores por Gemas:",
                "  &7‚îÉ &f#1: &b" + resolvePlaceholder(player, "%grivyzom_top_gems_1%") +
                        " &7(&d" + resolvePlaceholder(player, "%grivyzom_top_gems_1_amount%") + "&7)",
                "  &7‚îÉ &f#2: &b" + resolvePlaceholder(player, "%grivyzom_top_gems_2%") +
                        " &7(&d" + resolvePlaceholder(player, "%grivyzom_top_gems_2_amount%") + "&7)",
                "  &7‚îÉ &f#3: &b" + resolvePlaceholder(player, "%grivyzom_top_gems_3%") +
                        " &7(&d" + resolvePlaceholder(player, "%grivyzom_top_gems_3_amount%") + "&7)",
                "",
                "  &eüìä &fInformaci√≥n:",
                "  &7‚îÉ &fLos rankings se actualizan cada 2 minutos",
                "  &7‚îÉ &fIncluyen datos de todos los servidores del network",
                "  &7‚îÉ &fLas cantidades var√≠an ligeramente para simular actividad",
                "",
                "  &7üí° &f¬°Sigue jugando para aparecer en estos rankings!",
                "  &7üîÑ &fLos datos provienen directamente de GrivyzomCore",
                "",
                "&#E74C3C‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                ""
        ));
    }

    /**
     * Muestra test espec√≠fico de placeholders en tiempo real
     */
    private void showRealtimePlaceholderTest(Player player) {
        ColorUtils.sendMessages(player, Arrays.asList(
                "",
                "&#8E44AD‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                "",
                "  &5‚ö° &fTest Placeholders en Tiempo Real",
                "",
                "  &eüìä &fDatos del Servidor Actual:",
                "  &7‚îÉ &fJugadores locales: &a" + resolvePlaceholder(player, "%grivyzom_realtime_players%"),
                "  &7‚îÉ &fTPS del servidor: &a" + resolvePlaceholder(player, "%grivyzom_realtime_tps%"),
                "  &7‚îÉ &fUso de memoria: &e" + resolvePlaceholder(player, "%grivyzom_realtime_memory%"),
                "",
                "  &eüîÑ &fActualizaci√≥n Continua:",
                "  &7‚îÉ &fEstos datos se actualizan constantemente",
                "  &7‚îÉ &fNo dependen de GrivyzomCore (datos locales)",
                "  &7‚îÉ &fPerfectos para scoreboards din√°micos",
                "",
                "  &e‚öô &fRendimiento:",
                "  &7‚îÉ &fTPS > 19.0 = &a‚úÖ Excelente",
                "  &7‚îÉ &fTPS 18.0-19.0 = &e‚ö† Bueno",
                "  &7‚îÉ &fTPS < 18.0 = &c‚ùå Problemas",
                "",
                "  &eüíæ &fMemoria:",
                "  &7‚îÉ &f< 70% = &a‚úÖ Saludable",
                "  &7‚îÉ &f70-85% = &e‚ö† Vigilar",
                "  &7‚îÉ &f> 85% = &c‚ùå Cr√≠tico",
                "",
                "  &7üí° &fIdeales para TAB, scoreboards y monitores en tiempo real",
                "",
                "&#8E44AD‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨",
                ""
        ));
    }

    /**
     * Resuelve un placeholder para testing
     */
    private String resolvePlaceholder(Player player, String placeholder) {
        try {
            // Si PlaceholderAPI est√° disponible, usarlo
            if (Bukkit.getPluginManager().getPlugin("PlaceholderAPI") != null) {
                String resolved = me.clip.placeholderapi.PlaceholderAPI.setPlaceholders(player, placeholder);

                // Si el placeholder se resolvi√≥ (no devolvi√≥ el mismo string)
                if (!resolved.equals(placeholder)) {
                    return resolved;
                }
            }

            // Fallback manual para testing sin PlaceholderAPI
            if (plugin.getPlaceholders() != null) {
                // Extraer el identificador del placeholder
                String identifier = placeholder.replace("%grivyzom_", "").replace("%", "");
                return plugin.getPlaceholders().onPlaceholderRequest(player, identifier);
            }

            // √öltimo fallback
            return "&c[No disponible]";

        } catch (Exception e) {
            plugin.getLogger().warning("Error resolviendo placeholder " + placeholder + ": " + e.getMessage());
            return "&c[Error]";
        }
    }

// Tambi√©n necesitas agregar "placeholders" al m√©todo onCommand principal:
// En el switch statement del m√©todo onCommand, agrega:
/*
case "placeholders":
    handlePlaceholders(sender, args);
    break;
*/

// Y en el m√©todo onTabComplete, en la lista de comandos principales, agrega "placeholders":
/*
return Arrays.asList("reload", "test", "info", "welcome", "version", "items", "fireworks", "grivyzom", "placeholders")
*/

// Y en el segundo nivel de tab completion, agrega:
/*
case "placeholders":
    return Arrays.asList("test", "list", "refresh", "stats")
            .stream()
            .filter(s -> s.toLowerCase().startsWith(args[1].toLowerCase()))
            .collect(Collectors.toList());
*/

}